// Generated by gencpp from file main_program/startingRequest.msg
// DO NOT EDIT!


#ifndef MAIN_PROGRAM_MESSAGE_STARTINGREQUEST_H
#define MAIN_PROGRAM_MESSAGE_STARTINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main_program
{
template <class ContainerAllocator>
struct startingRequest_
{
  typedef startingRequest_<ContainerAllocator> Type;

  startingRequest_()
    : startStatus(0)
    , startTrigger(false)  {
    }
  startingRequest_(const ContainerAllocator& _alloc)
    : startStatus(0)
    , startTrigger(false)  {
  (void)_alloc;
    }



   typedef int16_t _startStatus_type;
  _startStatus_type startStatus;

   typedef uint8_t _startTrigger_type;
  _startTrigger_type startTrigger;





  typedef boost::shared_ptr< ::main_program::startingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main_program::startingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct startingRequest_

typedef ::main_program::startingRequest_<std::allocator<void> > startingRequest;

typedef boost::shared_ptr< ::main_program::startingRequest > startingRequestPtr;
typedef boost::shared_ptr< ::main_program::startingRequest const> startingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main_program::startingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main_program::startingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main_program::startingRequest_<ContainerAllocator1> & lhs, const ::main_program::startingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.startStatus == rhs.startStatus &&
    lhs.startTrigger == rhs.startTrigger;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main_program::startingRequest_<ContainerAllocator1> & lhs, const ::main_program::startingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main_program

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::main_program::startingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main_program::startingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_program::startingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main_program::startingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_program::startingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main_program::startingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main_program::startingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e6928b31eac7bd32f54443af440aaac";
  }

  static const char* value(const ::main_program::startingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e6928b31eac7bd3ULL;
  static const uint64_t static_value2 = 0x2f54443af440aaacULL;
};

template<class ContainerAllocator>
struct DataType< ::main_program::startingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main_program/startingRequest";
  }

  static const char* value(const ::main_program::startingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main_program::startingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 startStatus\n"
"bool startTrigger\n"
;
  }

  static const char* value(const ::main_program::startingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main_program::startingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.startStatus);
      stream.next(m.startTrigger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct startingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main_program::startingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main_program::startingRequest_<ContainerAllocator>& v)
  {
    s << indent << "startStatus: ";
    Printer<int16_t>::stream(s, indent + "  ", v.startStatus);
    s << indent << "startTrigger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.startTrigger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN_PROGRAM_MESSAGE_STARTINGREQUEST_H
